(defun exists(l e)
  (cond
      ((and (atom l) (equal e l)) t)
      ((atom l) nil)
      (t (SOME #'IDENTITY (MAPCAR #'(lambda(l)(exists l e)) l)))
   )
)

(defun path(l e)
  (cond
      ((atom l) nil)
      ((exists l e) (cons (car l) (mapcan #'(lambda(l)(path l e)) (cdr l))))
      (t  (mapcan #'(lambda(l)(path l e)) (cdr l)))
   )
)

(defun pathStruct(l e)
  (cond
      ;((and (atom l) (equal e l)) 0)
      ((atom l) 0)
      ((exists l e) (+ 1 (apply #'+(mapcar #'(lambda(l)(pathStruct l e)) (cdr l)))))
      (t (apply #'+(mapcar #'(lambda(l)(pathStruct l e)) (cdr l))))
   )
)

(defun depthMax(l)
  (cond
      ((atom l) 0)
      ((null (cdr l)) 0)
      (t (+ 1 (apply #'max (mapcar #'depthMax (cdr l)))))
   )
)

(defun main(l e)
  (cond
      ((exists l e) (- (+ 1 (depthMax l))(pathStruct l e)))
      (t -1)
   )
)