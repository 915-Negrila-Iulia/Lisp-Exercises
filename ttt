(defun nonNumAppend(l)
  (cond
      ((null l) nil)
      ((numberp (car l)) (nonNumAppend(cdr l)))
      ((atom (car l)) (cons (car l) (nonNumAppend(cdr l))))
      (t (append (nonNumAppend (car l)) (nonNumAppend (cdr l))))
  )
)

(defun nonNumCons(l)
  (cond
      ((null l) nil)
      ((numberp (car l)) (nonNumCons(cdr l)))
      ((atom (car l)) (cons (car l) (nonNumCons(cdr l))))
      (t (cons (nonNumCons (car l)) (nonNumCons (cdr l))))
  )
)

(defun insertPos(e p l)
  (cond
      ((= p 1) (cons e l))
      (t (cons (car l) (insertPos e (- p 1) (cdr l))))
   )
)

(defun insReturnSet(e p l)
  (cond
      ((= p 0) nil)
      (t (cons (insertPos e p l) (insReturnSet e (- p 1) l)))
   )
)

(defun insertion(e l)
      (insReturnSet e (+ (length l) 1) l)
) 

(defun inorder(l)
  (cond
      ((null l) nil)
      (t (append (inorder (cadr l)) (list (car l)) (inorder (caddr l))))
   )
)

(defun postorder(l)
  (cond 
      ((null l) nil)
      (t (append (postorder (cadr l)) (postorder (caddr l)) (list (car l))))
   )
)

(defun preorder(l)
  (cond
      ((null l) nil)
      (t (append (list (car l)) (preorder (cadr l)) (preorder (caddr l))))
   )
)

(defun doubleNum(l)
  (cond
      ((numberp l) (* 2 l))
      ((atom l) l)
      (t #'MAPCAR (doubleNum l))
   )
)